"use strict";var e=require("../utils-c2b0e463.js"),o=require("@zhlix/opencv-build"),n=require("child_process"),s=require("fs"),r=require("npmlog"),i=require("../commons-93fafeec.js"),l=require("picocolors"),t=require("path"),c=require("os"),d=require("glob"),a=require("util");function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var f=u(n),p=u(s),g=u(r),E=u(l),b=u(t),v=u(d);function N(o){if(o.isAutoBuildDisabled)return i.resolvePath(process.env.OPENCV_LIB_DIR)||function(o){if(g.default.info("install","OPENCV_LIB_DIR is not set, looking for default lib dir"),o.isWin)throw new Error("OPENCV_LIB_DIR has to be defined on windows when auto build is disabled");return e.defaultLibDir}(o);{const e=i.resolvePath(o.opencvLibDir);if(!e)throw Error("failed to resolve opencvLibDir path");return e}}function O(e,o){const n=b.default.join(e,"node_modules",".bin",o);return p.default.existsSync(n)?n:""}function S(e,o){const n=b.default.join(e,o);return p.default.existsSync(n)?n:""}!async function(){const n=process.argv;try{await e.spawn("node-pre-gyp",["install"],{cwd:process.cwd()})}catch(s){!async function(n){let s=!1,r="max";const i=["build","clean","configure","rebuild","install","list","remove","auto"];let l=n[n.length-1];if(n.includes("--help")||n.includes("-h")||!i.includes(l))return console.log(`Usage: build-opencv build|rebuild|configure|install [--version=<version>] [--vscode] [--jobs=<thread>] [--electron] [--node-gyp-options=<options>] [--dry-run] [--flags=<flags>] [--cuda] [--nocontrib] [--nobuild] ${i.join("|")}`),void console.log(o.genHelp());if("auto"===l){const e=process.env;e.OPENCV4NODEJS_DISABLE_AUTOBUILD&&(l="rebuild"),e.OPENCV4NODEJS_AUTOBUILD_OPENCV_VERSION&&(l="rebuild");const n=o.OpenCVBuildEnv.readEnvsFromPackageJson();n&&Object.keys(n).length&&(l="rebuild")}if("auto"===l)return void console.log("Use 'npx build-opencv rebuild' script to start node-gyp, use --help to check all options.\nor configure configure a opencv4nodejs section in your package.json\nor use OPENCV4NODEJS_* env variable.");const t=o.args2Option(n);t.extra?.jobs&&(r=t.extra.jobs),(t.extra?.["dry-run"]||t.extra?.dryrun)&&(s=!0);for(const e in["autoBuildFlags"]){const o=e;t[o]&&console.log(`using ${e}:`,t[o])}const d=new o.OpenCVBuilder(t);g.default.info("install",`Using openCV ${E.default.green("%s")}`,d.env.opencvVersion);const u=N(d.env);if(g.default.info("install","Using lib dir: "+u),await d.install(),!p.default.existsSync(u))throw new Error("library dir does not exist: "+u);const _=d.getLibs.getLibs().filter((e=>e.libPath));if(!_.length)throw new Error("no OpenCV libraries found in lib dir: "+u);g.default.info("install",`${c.EOL}Found the following libs:`),_.forEach((e=>g.default.info("install",`${E.default.yellow("%s")}: ${E.default.green("%s")}`,e.opencvModule,e.libPath)));const $=e.getOPENCV4NODEJS_DEFINES(_).join(";"),I=e.getOPENCV4NODEJS_INCLUDES(d.env).join(";"),D=e.getOPENCV4NODEJS_LIBRARIES(d.env,u,_).join(";");process.env.OPENCV4NODEJS_DEFINES=$,process.env.OPENCV4NODEJS_INCLUDES=I,process.env.OPENCV4NODEJS_LIBRARIES=D;let w="";w+=` --jobs ${r}`,process.env.BINDINGS_DEBUG||t.extra?.debug?w+=" --debug":w+=" --release";const V=b.default.join(__dirname,"../..");w+=` ${t.extra?.["node-gyp-options"]||""}`;const h=t.extra?.electron?"electron-rebuild":"node-gyp";let C="";for(const e of process.env.PATH.split(b.default.delimiter))if(C=S(e,h),C){C=h;break}if(!C)for(const e in[__dirname,process.cwd()]){let o=e;for(;o&&(C=O(o,h),!C);){const e=b.default.resolve(o,"..");if(e===o)break;o=e}if(C)break}if(!C){const e=`Please install "${h}" to build openCV bindings${c.EOL}npm install --save-dev ${h}`;throw Error(e)}if(C+=` ${l}${w}`,g.default.info("install",`Spawning in directory:${V} node-gyp process: ${C}`),t.extra?.vscode){const e=a.promisify(v.default),o=await e(b.default.join(d.env.opencvSrc,"modules","*","include")),n=await e(b.default.join(d.env.opencvContribSrc,"modules","*","include")),s=d.env.opencvVersion.split("."),r={name:"opencv4nodejs",includePath:["Missing node-gyp/Cache/16.13.1/include/node",...I,"${workspaceFolder}/node_modules/nan","${workspaceFolder}/node_modules/native-node-utils/src","${workspaceFolder}/cc","${workspaceFolder}/cc/core",...o,...n],defines:[`CV_VERSION_MAJOR=${s[0]}`,`CV_VERSION_MINOR=${s[1]}`,`CV_VERSION_REVISION=${s[2]}`,...$],cStandard:"c11",cppStandard:"c++11"};"win32"===process.platform&&(r.defines.push("WIN"),r.defines.push("_HAS_EXCEPTIONS=1")),console.log(JSON.stringify(r,null,"  "))}else if(s){let e="export ";"win32"===process.platform&&(e="$Env:"),console.log(""),console.log(`${e}OPENCV4NODEJS_DEFINES="${$}"`),console.log(`${e}OPENCV4NODEJS_INCLUDES="${I}"`),console.log(`${e}OPENCV4NODEJS_LIBRARIES="${D}"`),console.log(""),V.includes(" ")?console.log(`cd "${V}"`):console.log(`cd ${V}`),console.log(C),console.log("")}else{const o=f.default.exec(C,{maxBuffer:1/0,cwd:V},(async function(o){const n=t.extra?.electron?"electron-rebuild":"node-gyp";if(o)console.log("error: ",o),g.default.error("install",`${n} failed and return ${o.name} ${o.message} return code: ${o.code}`);else{let o="";o=process.env.BINDINGS_DEBUG||t.extra?.debug?"build/Debug":"build/Release",await e.exec(`cp -r ${u} ${o}`),g.default.info("install",`${n} complete successfully`)}}));o.stdout&&o.stdout.pipe(process.stdout),o.stderr&&o.stderr.pipe(process.stderr)}}(n)}}();
