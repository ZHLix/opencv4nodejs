"use strict";var e=require("child_process"),t=require("os"),n=require("npmlog"),o=require("./commons-93fafeec.js"),i=require("path"),l=require("picocolors");function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=r(e),u=r(n),a=r(i),c=r(l);const f=e=>e.includes(" ")?`"${e}"`:e;exports.defaultLibDir="/usr/local/lib",exports.exec=function(e,t){return u.default.silly("install","executing: %s",f(e)),new Promise((function(n,o){s.default.exec(e,t,(function(e,t,i){const l=e||i;return l?o(l):n(t.toString())}))}))},exports.getOPENCV4NODEJS_DEFINES=function(e){const n=e.map((e=>`OPENCV4NODEJS_FOUND_LIBRARY_${e.opencvModule.toUpperCase()}`));u.default.info("defines",`${t.EOL}Setting the following defines:`);const o=Math.max(...n.map((e=>e.length)));let i="";for(const e of n)i.length>80&&(u.default.info("defines",c.default.yellow(i)),i=""),i+=e.padEnd(o+1," ");return i&&u.default.info("defines",c.default.yellow(i)),n},exports.getOPENCV4NODEJS_INCLUDES=function(e){const{OPENCV_INCLUDE_DIR:n}=process.env;let i="";n&&(i=o.resolvePath(n));const l=e.isAutoBuildDisabled?i?[i]:function(e){if(u.default.info("install","OPENCV_INCLUDE_DIR is not set, looking for default include dir"),e.isWin)throw new Error("OPENCV_INCLUDE_DIR has to be defined on windows when auto build is disabled");return["/usr/local/include","/usr/local/include/opencv4"]}(e):[o.resolvePath(e.opencvInclude),o.resolvePath(e.opencv4Include)];return u.default.info("install",`${t.EOL}Setting the following includes:`),l.forEach((e=>u.default.info("includes",c.default.green(e)))),l},exports.getOPENCV4NODEJS_LIBRARIES=function(e,n,i){const l=e.isWin?i.map((e=>o.resolvePath(e.libPath))):["-L"+n].concat(i.map((e=>"-lopencv_"+e.opencvModule))).concat("-Wl,-rpath,"+n);if(l.length>0){const e=a.default.dirname(l[0]),n=l.map((e=>a.default.basename(e)));u.default.info("libs",`${t.EOL}Setting lib from ${c.default.green(e)} : ${n.map(c.default.yellow).join(", ")}`)}else u.default.info("libs",`${t.EOL}no Libs available`);return l},exports.spawn=function(e,n,o,i){i=i||{};const l=e=>{i&&i.out&&!(e=i.out(e))||process.stdout.write(e)},r=e=>{i&&i.err&&!(e=i.err(e))||process.stderr.write(e)};return u.default.silly("install","spawning:",f(e),n.map(f).join(" ")),new Promise((function(i,u){try{const a=s.default.spawn(e,n,{stdio:["inherit","pipe","pipe"],...o});a.stderr.on("data",r),a.stdout.on("data",l),a.on("exit",(function(l){"number"!=typeof l&&(l=null);const r=`running: ${f(e)} ${n.map(f).join(" ")}${t.EOL}in ${o.cwd} exited with code ${l} (for more info, set '--loglevel silly')'`;return 0!==l?u(r):i(r)}))}catch(e){return u(e)}}))};
